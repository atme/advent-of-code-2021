import { explode, first, magnitude, Pair, parse, second, split, sum } from '../src/day18'

test('day 18 magnitude', () => {
  const snailfish: Pair = [[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]
  expect(magnitude(snailfish)).toBe(4140)
})

test('day 18 split', () => {
  const snailfish: Pair = [[[[0,7],4],[15,[0,13]]],[1,1]]
  expect(split(snailfish)).toEqual([[[[0,7],4],[[7,8],[0,13]]],[1,1]])
})

test('day 18 parse easy', () => {
  expect(parse('[[1,2],3]')[0]).toEqual([[1,2],3])
})

test('day 18 parse hard', () => {
  expect(parse('[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]').pop())
    .toEqual([[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]])
})

test('day 18 explode1', () => {
  expect(explode([[[[[9,8],1],2],3],4])).toEqual([[[[0,9],2],3],4])
})

test('day 18 explode2', () => {
  expect(explode([7,[6,[5,[4,[3,2]]]]])).toEqual([7,[6,[5,[7,0]]]])
})

test('day 18 explode3', () => {
  expect(explode([[6,[5,[4,[3,2]]]],1])).toEqual([[6,[5,[7,0]]],3])
})

test('day 18 explode4', () => {
  expect(explode([[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]])).toEqual([[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]])
})

test('day 18 explode5', () => {
  expect(explode([[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]])).toEqual([[3,[2,[8,0]]],[9,[5,[7,0]]]])
})

test('day 18 explode6', () => {
  expect(explode([[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]])).toEqual([[[[0,7],4],[[7,8],[6,0]]],[8,1]])
})

test('day 18 explode7', () => {
  expect(explode([[[[4,5],[5,0]],[[[4,5],[2,6]],[9,5]]], 1]))
    .toEqual([[[[4,5],[5,4]],[[0,[7,6]],[9,5]]], 1])
})

test('day 18 sum1', () => {
  expect(sum([[[[4,3],4],4],[7,[[8,4],9]]], [1,1])).toEqual([[[[0,7],4],[[7,8],[6,0]]],[8,1]])
})

test('day 18 sum2', () => {
  const input = `[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]`
  expect(parse(input).reduce(sum))
    .toEqual([[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]])
})

const input = `[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`

test('day 18 sum3', () => {
  expect(parse(input).reduce(sum))
    .toEqual([[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]])
})

test('day 18 first', () => {
  expect(first(input)).toBe(4140)
})

test('day 18 second', () => {
  expect(second(input)).toBe(3993)
})